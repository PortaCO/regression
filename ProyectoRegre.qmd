---
title: "Análisis de Factores influyentes en el componente Energético (kcal) en los platos peruanos en el 2017"
format: html
editor: visual
---

# Pregunta de Investigacion

¿Cuales son los componentes nutricionales que influyen signficativamente en el contenido energetico (kcal) de las preparaciones alimenticias y como se relacionan entre si en los platos peruanos en el 2017

# Objetivo General

Analizar el componente energetico de los platos peruanos en base a sus multiples composiciones

# Objetivo Especifico

-   Indentificar cuales factores o componentes alimenticios influyen mas en el valor energetico-kcal (variable dependiente) proporcionada por el alimento.
-   Identificar si la cantidad de agua presente en los alimentos esta relacionada negativamente con el valor energetico, es decir, si alimentos con mayor contenido de agua tienden a tene menos calorias.
-   Evaluar como el estrato o categoria de alimentos influye en el valor energetico.

## Datos

Importando la base de datos

```{r}
# Instalar el paquete si es necesario
# install.packages("readxl")

library(readxl)

# Cargar el archivo Excel

data <- read_excel("C:/Users/Hp/Downloads/ProyectoRegresion/BD_CAlimenticios (1).xlsx")
# Mostrar los primeros registros
head(data)
```

## Diccionario de Variables

```{r}
# Instalar el paquete si es necesario
# install.packages("readxl")

library(readxl)

# Cargar el archivo Excel

diccionario_variables <- read_excel("C:/Users/Hp/Downloads/ProyectoRegresion/Diccionario_Variables.xlsx")

library(tibble)

# Convertir a tibble y mostrar
diccionario_variables <- as_tibble(diccionario_variables)
print(diccionario_variables, n = Inf)  # Muestra todas las filas
```

```{r}
print(paste("Numero de Variables: ",length(data)))
```

# Exploracion Inicial de Datos

## Grafica de dispersion de los datos con la variable dependiente
```{r}
# Selecciona las variables independientes (todas menos ENERC)
variables_independientes <- colnames(data)[colnames(data) != "ENERC"]

# Generar gráficos de dispersión
par(mfrow = c(3, 4)) # Dividir ventana en varias filas y columnas
for (var in variables_independientes) {
  plot(data[[var]], data$ENERC,
       xlab = var, ylab = "ENERC",
       main = paste("ENERC vs", var),
       pch = 1, col = "#FA8072")
}
```


## Analisis de Correlacion para las variables

```{r, message=FALSE}
library(ggcorrplot)

# Calcular la matriz de correlación
matriz_correlacion <- cor(data[1:29],method = "pearson")

# Invertir el orden de las filas y columnas
matriz_correlacion_invertida_x <- matriz_correlacion[, ncol(matriz_correlacion):1]

# Graficar la matriz de correlación
ggcorrplot(matriz_correlacion_invertida_x, 
           lab = FALSE,        # Mostrar los valores en el gráfico
           lab_size = 1,      # Tamaño de las etiquetas
           method = "square", # Mostrar celdas cuadradas
           colors = c("#3498db", "white", "#e74c3c"), # Colores del gradiente
           title = "Matriz de Correlación",   # Título del gráfico
           hc.order = FALSE,   # Reordenar las variables jerárquicamente
           outline.color = "black",
           tl.cex = 10,        # Ajusta el tamaño de las etiquetas
           tl.srt = 90)        # Rotación vertical de las etiquetas
```







# Ajuste del modelo de regresión lineal múltiple inicial

```{r}
modelo_inicial <- lm(ENERC ~ ., data)

# Resumen del modelo
summary(modelo_inicial)
```

```{r}
# Dividir datos en entrenamiento y prueba
set.seed(123)
train_index <- sample(1:nrow(data), 0.7 * nrow(data))
train_data <- data[train_index, ]
test_data <- data[-train_index, ]

# Ajustar el modelo con datos de entrenamiento
modelo <- lm(ENERC ~ ., data = train_data)

# Predecir en datos de prueba
predicciones <- predict(modelo, newdata = test_data)

# Calcular R^2 predictivo
y_test <- test_data$ENERC
r2_pred <- 1 - sum((y_test - predicciones)^2) / sum((y_test - mean(y_test))^2)
print(r2_pred)
```
## Analisis de Residuos para modelo inicial

### Supuesto de homocedasticidad
```{r}
# Gráficos de diagnóstico (residuos, homocedasticidad, normalidad, etc.)
#par(mfrow = c(2, 2))
#plot(modelo_inicial)

#Valores ajustados
valores_ajustados <- fitted(modelo_inicial)

# Residuos estandarizados
residuos_estandarizados <- rstandard(modelo_inicial)

# Graficar residuos estandarizados
plot(valores_ajustados, residuos_estandarizados, 
     main = "Residuos estandarizados vs Valores ajustados",
     xlab = "Valores ajustados", 
     ylab = "Residuos estandarizados",
     col = "#FA8072",pch=19)
abline(h = 0, col = "red", lty = 2)
```
### Supuesto de Normalidad
```{r}
# QQ plot para los residuos
qqnorm(rstandard(modelo_inicial), 
       main = "QQ Plot de los Residuos", 
       ylab = "Cuantiles de los Residuos", 
       xlab = "Cuantiles Teóricos")
qqline(resid(modelo_inicial), col = "red", lwd = 2)  # Línea de referencia


```
### Supuesto de Independencia
```{r,message=FALSE}
# Gráfico de residuos vs índice de observación
plot(resid(modelo_inicial), 
     type = "o", 
     main = "Independencia de los Residuos", 
     xlab = "Índice de Observación", 
     ylab = "Residuos",col = "#2980b9")
abline(h = 0, col = "red", lty = 2)  # Línea de referencia en 0

# Prueba de Durbin-Watson
#install.packages("lmtest")
library(lmtest)
dwtest(modelo_inicial)


```


### Evaluar multicolinealidad
```{r,message=FALSE}
library(car)

#vif(modelo_inicial)  # Factor de inflación de la varianza
```
```{r}
alias(modelo_inicial)

```
```{r}
# Lista de variables seleccionadas, excluyendo ciertas variables
variables_seleccionadas <- setdiff(colnames(data),c("ENERC", "EstratoE", "Platos_principales"))
# Crear fórmula dinámicamente
formula <- as.formula(paste("ENERC ~", paste(variables_seleccionadas, collapse = " + ")))

#Modelo inicial quietando variables dummies como referencia
modelo_inicial1 <- lm(formula, data)
vif(modelo_inicial1)  # Factor de inflación de la varianza
```


```{r,message=FALSE}
library(olsrr)
# Analiza el modelo con VIF y tolerancia
ols_vif_tol(modelo_inicial1)  #VIF>5 , Tolerance<0.20 


```
```{r}
# WATER, PROCNT, CHOCDF, CHOAVL,FIBTG P, ZN, FE, CARTBQ, THIA, NIA, VITC, 

# Selecciona la variable objetivo
variable_objetivo <- "WATER"
# Calcula la correlación de la variable objetivo con las demás
correlaciones <- sapply(data, function(var) {
    round(cor(data[[variable_objetivo]],var,method = "pearson"),2)
})
# Ordenar las correlaciones de mayor a menor
correlaciones_ordenadas <- sort(abs(correlaciones), decreasing = TRUE, na.last = TRUE)
# Mostrar las correlaciones
print(correlaciones_ordenadas)      # WATER - VITC
```
```{r}
# WATER, PROCNT, CHOCDF, CHOAVL,FIBTG P, ZN, FE, CARTBQ, THIA, NIA, VITC, 
variable_objetivo <- "PROCNT"
# Calcula la correlación de la variable objetivo con las demás
correlaciones <- sapply(data, function(var) {
    round(cor(data[[variable_objetivo]],var,method = "pearson"),2)
})
# Ordenar las correlaciones de mayor a menor
correlaciones_ordenadas <- sort(abs(correlaciones), decreasing = TRUE, na.last = TRUE)
# Mostrar las correlaciones
print(correlaciones_ordenadas)    # PROCTN - ZN
```
```{r}
# WATER, PROCNT, CHOCDF, CHOAVL,FIBTG P, ZN, FE, CARTBQ, THIA, NIA, VITC, 
variable_objetivo <- "CHOCDF"
# Calcula la correlación de la variable objetivo con las demás
correlaciones <- sapply(data, function(var) {
    round(cor(data[[variable_objetivo]],var,method = "pearson"),2)
})
# Ordenar las correlaciones de mayor a menor
correlaciones_ordenadas <- sort(abs(correlaciones), decreasing = TRUE, na.last = TRUE)
# Mostrar las correlaciones
print(correlaciones_ordenadas)    #CHOCDF - CHOAVL
```
```{r}
# WATER, PROCNT, CHOCDF, CHOAVL,FIBTG P, ZN, FE, CARTBQ, THIA, NIA, VITC, 

# Selecciona la variable objetivo
variable_objetivo <- "FIBTG"
# Calcula la correlación de la variable objetivo con las demás
correlaciones <- sapply(data, function(var) {
    round(cor(data[[variable_objetivo]],var,method = "pearson"),2)
})
# Ordenar las correlaciones de mayor a menor
correlaciones_ordenadas <- sort(abs(correlaciones), decreasing = TRUE, na.last = TRUE)
# Mostrar las correlaciones
print(correlaciones_ordenadas)      #FIBTG - mas variables
```

```{r}
# WATER, PROCNT, CHOCDF, CHOAVL,FIBTG P, ZN, FE, CARTBQ, THIA, NIA, VITC, 

# Selecciona la variable objetivo
variable_objetivo <- "P"
# Calcula la correlación de la variable objetivo con las demás
correlaciones <- sapply(data, function(var) {
    round(cor(data[[variable_objetivo]],var,method = "pearson"),2)
})
# Ordenar las correlaciones de mayor a menor
correlaciones_ordenadas <- sort(abs(correlaciones), decreasing = TRUE, na.last = TRUE)
# Mostrar las correlaciones
print(correlaciones_ordenadas)      #P - mas variables
```
```{r}
# WATER, PROCNT, CHOCDF, CHOAVL,FIBTG P, ZN, FE, CARTBQ, THIA, NIA, VITC, 

# Selecciona la variable objetivo
variable_objetivo <- "ZN"
# Calcula la correlación de la variable objetivo con las demás
correlaciones <- sapply(data, function(var) {
    round(cor(data[[variable_objetivo]],var,method = "pearson"),2)
})
# Ordenar las correlaciones de mayor a menor
correlaciones_ordenadas <- sort(abs(correlaciones), decreasing = TRUE, na.last = TRUE)
# Mostrar las correlaciones
print(correlaciones_ordenadas)      #ZN - PROCNT
```
```{r}
# WATER, PROCNT, CHOCDF, CHOAVL,FIBTG P, ZN, FE, CARTBQ, THIA, NIA, VITC, 

# Selecciona la variable objetivo
variable_objetivo <- "FE"
# Calcula la correlación de la variable objetivo con las demás
correlaciones <- sapply(data, function(var) {
    round(cor(data[[variable_objetivo]],var,method = "pearson"),2)
})
# Ordenar las correlaciones de mayor a menor
correlaciones_ordenadas <- sort(abs(correlaciones), decreasing = TRUE, na.last = TRUE)
# Mostrar las correlaciones
print(correlaciones_ordenadas)      #FE - mas variables
```


```{r}
# WATER, PROCNT, CHOCDF, CHOAVL,FIBTG P, ZN, FE, CARTBQ, THIA, NIA, VITC, 

# Selecciona la variable objetivo
variable_objetivo <- "CARTBQ"
# Calcula la correlación de la variable objetivo con las demás
correlaciones <- sapply(data, function(var) {
    round(cor(data[[variable_objetivo]],var,method = "pearson"),2)
})
correlaciones_filtradas <- correlaciones[abs(correlaciones) > 0.5]
# Ordenar las correlaciones de mayor a menor
correlaciones_ordenadas <- sort(abs(correlaciones), decreasing = TRUE, na.last = TRUE)
# Mostrar las correlaciones
print(correlaciones_ordenadas)      #CARTBQ - mas variables
```
```{r}
# WATER, PROCNT, CHOCDF, CHOAVL,FIBTG P, ZN, FE, CARTBQ, THIA, NIA, VITC, 

# Selecciona la variable objetivo
variable_objetivo <- "THIA"
# Calcula la correlación de la variable objetivo con las demás
correlaciones <- sapply(data, function(var) {
    round(cor(data[[variable_objetivo]],var,method = "pearson"),2)
})
correlaciones_ordenadas <- sort(abs(correlaciones), decreasing = TRUE, na.last = TRUE)
# Mostrar las correlaciones
print(correlaciones_ordenadas)      #THIA - ZN
```
```{r}
# WATER, PROCNT, CHOCDF, CHOAVL,FIBTG P, ZN, FE, CARTBQ, THIA, NIA, VITC, 

# Selecciona la variable objetivo
variable_objetivo <- "NIA"
# Calcula la correlación de la variable objetivo con las demás
correlaciones <- sapply(data, function(var) {
    round(cor(data[[variable_objetivo]],var,method = "pearson"),2)
})
# Ordenar las correlaciones de mayor a menor
correlaciones_ordenadas <- sort(abs(correlaciones), decreasing = TRUE, na.last = TRUE)
# Mostrar las correlaciones
print(correlaciones_ordenadas)      #NIA - mas variables
```
```{r}
# WATER, PROCNT, CHOCDF, CHOAVL,FIBTG P, ZN, FE, CARTBQ, THIA, NIA, VITC, 

# Selecciona la variable objetivo
variable_objetivo <- "VITC"
# Calcula la correlación de la variable objetivo con las demás
correlaciones <- sapply(data, function(var) {
    round(cor(data[[variable_objetivo]],var,method = "pearson"),2)
})
# Ordenar las correlaciones de mayor a menor
correlaciones_ordenadas <- sort(abs(correlaciones), decreasing = TRUE, na.last = TRUE)
# Mostrar las correlaciones
print(correlaciones_ordenadas)      #VITC- WATER
```

Variables a eliminar: VITC, ZN, CHOAVL
```{r}
# Eliminar las columnas especificadas
data <- data[, !colnames(data) %in% c("VITC", "ZN", "CHOAVL")]

modelo2 <- lm(ENERC ~ ., data)

ols_vif_tol(modelo2)
```
```{r}
#PROCNT , THIA

# Selecciona la variable objetivo
variable_objetivo <- "PROCNT"
# Calcula la correlación de la variable objetivo con las demás
correlaciones <- sapply(data, function(var) {
    round(cor(data[[variable_objetivo]],var,method = "pearson"),2)
})
# Ordenar las correlaciones de mayor a menor
correlaciones_ordenadas <- sort(abs(correlaciones), decreasing = TRUE, na.last = TRUE)
# Mostrar las correlaciones
print(correlaciones_ordenadas)      
```

```{r}
summary(modelo2)
```

Eliminando THIA
```{r}
data <- data[, !colnames(data) %in% c("THIA")]

modelo3 <- lm(ENERC ~ ., data)

ols_vif_tol(modelo3)
```
```{r}
#PROCNT 

# Selecciona la variable objetivo
variable_objetivo <- "PROCNT"
# Calcula la correlación de la variable objetivo con las demás
correlaciones <- sapply(data, function(var) {
    round(cor(data[[variable_objetivo]],var,method = "pearson"),2)
})
# Ordenar las correlaciones de mayor a menor
correlaciones_ordenadas <- sort(abs(correlaciones), decreasing = TRUE, na.last = TRUE)
# Mostrar las correlaciones
print(correlaciones_ordenadas)      
```
```{r}
summary(modelo3)
```

### Modelo resultante 
```{r}
colnames(data)
print(paste("Numero de Variables: ",length(data)))
```


# Metodos de Seleccion de Variables
## Metodo del mejor subconjunto

```{r,message=FALSE}
if (!require("leaps")) install.packages("leaps")
library(leaps)

variables_seleccionadas <- setdiff(colnames(data),c("ENERC", "EstratoE", "Platos_principales"))
# Crear fórmula dinámicamente
formula <- as.formula(paste("ENERC ~", paste(variables_seleccionadas, collapse = " + ")))

modelo4 <- regsubsets( formula, data)


# Resumen del modelo
resumen <- summary(modelo4)
resumen
```

```{r}
# Ver los Cp de Mallows para cada modelo
cp_mallows <- resumen$cp
print(cp_mallows)

# Seleccionar el modelo con el menor Cp de Mallows
mejor_modelo_cp <- which.min(cp_mallows)
cat("El mejor modelo según Cp de Mallows tiene", mejor_modelo_cp, "variables.\n")

# Mostrar las variables seleccionadas para ese modelo
variables_seleccionadas <- resumen$which[mejor_modelo_cp, ]
print(variables_seleccionadas)

```
```{r}
# Ajustar el modelo con las variables seleccionadas
modelo_mejor_cp <- lm(ENERC ~ WATER + PROCNT + FAT + CHOCDF + ASH + CARTBQ + VITA + K, data = data)

# Resumen del modelo
summary(modelo_mejor_cp)
```

```{r}
anova_resultado <- anova(modelo_mejor_cp)
print(anova_resultado)
```

```{r}
# Gráficos de diagnóstico (residuos, homocedasticidad, normalidad, etc.)
#par(mfrow = c(2, 2))
#plot(modelo_mejor_cp)

#Valores ajustados
valores_ajustados <- fitted(mode_mejor_cp)

# Residuos estandarizados
residuos_estandarizados <- rstandard(modelo_mejor_cp)

# Graficar residuos estandarizados
plot(valores_ajustados, residuos_estandarizados, 
     main = "Residuos estandarizados vs Valores ajustados",
     xlab = "Valores ajustados", 
     ylab = "Residuos estandarizados",
     col = "#FA8072",pch=19)
abline(h = 0, col = "red", lty = 2)
```




